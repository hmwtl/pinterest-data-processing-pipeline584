AWSTemplateFormatVersion: 2010-09-09
Description:  This template deploys an EC2 with VPC and security group in either us-east-1 or us-west-2,
 with a pair of public and private subnets spread across two Availability Zones. It deploys an internet gateway, 
 with a default route on the public subnets, a Linux t2.medium Instance with Security Group with open HTTP access. 


Mappings:
  RegionMap:
    us-east-1:
     "AMI": "ami-0742b4e673072066f"
    us-west-2:
     "AMI": "ami-0518bb0e75d3619ca"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Pinterest Project

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Pinterest Project

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Pinterest Project Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Pinterest Project Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Pinterest Project Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Pinterest Project Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Pinterest Project Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "9090"
          ToPort: "9090"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "9100"
          ToPort: "9100"
          CidrIp: 0.0.0.0/0        
        - IpProtocol: tcp
          FromPort: "2181"
          ToPort: "2181"
          CidrIp: 0.0.0.0/0     
        - IpProtocol: tcp
          FromPort: "7077"
          ToPort: "7077"
          CidrIp: 0.0.0.0/0            
        - IpProtocol: tcp
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: 0.0.0.0/0            
        - IpProtocol: tcp
          FromPort: "9042"
          ToPort: "9042"
          CidrIp: 0.0.0.0/0           
        - IpProtocol: tcp
          FromPort: "8000"
          ToPort: "8000"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "8793"
          ToPort: "8793"
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: "5432"
          ToPort: "5432"
          CidrIp: 0.0.0.0/0           
        - IpProtocol: tcp
          FromPort: "9091"
          ToPort: "9091"
          CidrIp: 0.0.0.0/0            
          
      VpcId: !Ref VPC 
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      IamInstanceProfile: s3-admin
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      KeyName: pin_app
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: Pinterest Project EC2     
      UserData:
        Fn::Base64: !Sub |
            #!/bin/sh
            export PATH=/usr/local/bin:$PATH;
            sudo yum update -y 
            sudo yum upgrade -y
          
            # install docker engine
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
            
            # instal docker-compose
            sudo wget https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)
            sudo mv docker-compose-$(uname -s)-$(uname -m) /usr/local/bin/docker-compose
            sudo chmod -v +x /usr/local/bin/docker-compose
            
            
            # install git
            sudo yum install git -y
            
            # Install java            
            sudo yum install java-1.8.0-openjdk -y 
            
            # install wget
            sudo yum install wget
            
            # create folders
            # mkdir /home/ec2-user/kafka
            # mkdir /home/ec2-user/spark
            # mkdir /home/ec2-user/cassandra
            # mkdir /home/ec2-user/presto
            # mkdir /home/ec2-user/airflow
            
            # sudo git clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/pinterest_project
            sudo git clone https://github.com/huo1m1w1/pinterest-data-processing-pipeline584.git
            
            # Download kafka package
            sudo wget https://downloads.apache.org/kafka/3.2.3/kafka_2.13-3.2.3.tgz
            sudo wget https://downloads.apache.org/kafka/3.2.3/kafka_2.13-3.2.3.tgz.asc
            sudo wget https://downloads.apache.org/kafka/KEYS
            
            # verifying kafka
            sudo gpg --import KEYS
            sudo gpg --verify kafka_2.13-3.2.3.tgz.asc kafka_2.13-3.2.3.tgz
                          
            sudo tar -xzf kafka_2.13-3.2.3.tgz -C /home/ec2-user/ --remove-files
            sudo mv /home/ec2-user/kafka_2.13-3.2.3 /home/ec2-user/kafka
            sudo rm kafka_2.13-3.2.3.tgz
            sudo rm kafka_2.13-3.2.3.tgz.asc
            sudo rm -f KEYS
        
            
            # insatll spark
            sudo wget https://dlcdn.apache.org/spark/spark-3.3.1/spark-3.3.1-bin-hadoop3.tgz
            sudo wget https://dlcdn.apache.org/spark/spark-3.3.1/spark-3.3.1-bin-hadoop3.tgz.asc
            sudo wget https://downloads.apache.org/spark/KEYS
            
            # verify spark package
            sudo gpg --import KEYS
            sudo gpg --verify spark-3.3.1-bin-hadoop3.tgz.asc spark-3.3.1-bin-hadoop3.tgz
                             
            sudo tar -xzf spark-3.3.1-bin-hadoop3.tgz -C /home/ec2-user/ --remove-files
            sudo mv /home/ec2-user/spark-3.3.1-bin-hadoop3 /home/ec2-user/spark
            sudo rm spark-3.3.1-bin-hadoop3.tgz.asc
            sudo rm -f KEYS
            sudo rm -f spark-3.3.1-bin-hadoop3.tgz
            
            # install decendencies
            sudo wget https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.2/hadoop-aws-3.3.2.jar -P /home/ec2-user/spark/jars
            sudo wget https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.11.1026/aws-java-sdk-bundle-1.11.1026.jar -P /home/ec2-user/spark/jars
            
            # install cassandra
            
            sudo wget https://downloads.apache.org/cassandra/4.0.7/apache-cassandra-4.0.7-bin.tar.gz
            sudo wget https://downloads.apache.org/cassandra/4.0.7/apache-cassandra-4.0.7-bin.tar.gz.asc
            sudo wget https://downloads.apache.org/cassandra/KEYS
            sudo gpg --import KEYS
            sudo gpg --verify apache-cassandra-4.0.7-bin.tar.gz.asc apache-cassandra-4.0.7-bin.tar.gz
            
            tar -xvzf apache-cassandra-4.0.7-bin.tar.gz -C /home/ec2-user/ --remove-files
            sudo mv /home/ec2-user/apache-cassandra-4.0.7 /home/ec2-user/cassandra
            sudo mkdir /home/ec2-user/cassandra//etc
            sudo rm apache-cassandra-4.0.7-bin.tar.gz.asc            
            sudo rm KEYS
            sudo rm -f apache-cassandra-4.0.7-bin.tar.gz
            
            
            # install presto
            # sudo wget https://repo.maven.apache.org/maven2/io/prestosql/presto-server/350/presto-server-350.tar.gz
            # tar -xvzf presto-server-350.tar.gz -C /home/ec2-user/presto --remove-files
            # sudo mv /home/ec2-user/presto-server-350 /home/ec2-user/presto
            # mkdir /home/ec2-user/presto/etc
            # sudo wget https://repo1.maven.org/maven2/com/facebook/presto/presto-jdbc/0.277/presto-jdbc-0.277.jar
            
            # mv /pinterest-data-processing-pipeline584/config.properties /home/ec2-user/presto/presto-server-350/etc/config.properties
            # mv /pinterest-data-processing-pipeline584/node.properties /home/ec2-user/presto/presto-server-350/etc/node.properties
            # mv /pinterest-data-processing-pipeline584/jvm.config /home/ec2-user/presto/presto-server-350/etc/jvm.config
            # mkdir /home/ec2-user/presto/presto-server-350/etc/catalog
            # mv /pinterest-data-processing-pipeline584/tpch.properties /home/ec2-user/presto/presto-server-350/etc/catalog/tpch.properties
            # sudo rm -f presto-server-350.tar.gz
            
            # install airflow
            export AIRFLOW_HOME=/home/ec2-user/airflow
            pip3 install apache-airflow==2.4.3 --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.4.3/constraints-3.7.txt
            airflow db init
            airflow users create --username admin --firstname Michael --lastname Huo --role Admin --email m.h@apache.airflow.org
            
            airflow webserver --port 8080
            
            
            # install prometheus
            # create a system user
            sudo useradd --no-create-home --shell /bin/false prometheus
            # Create the directories in which we will be storing our configuration files and libraries 
            sudo mkdir /etc/prometheus
            sudo mkdir /var/lib/prometheus
            
            
            sudo chown prometheus:prometheus /var/lib/prometheus
            sudo wget https://github.com/prometheus/prometheus/releases/download/v2.41.0/prometheus-2.41.0.linux-amd64.tar.gz
            sudo tar -xvf prometheus-2.41.0.linux-amd64.tar.gz
            sudo rm prometheus-2.41.0.linux-amd64.tar.gz
            sudo mv prometheus-2.41.0.linux-amd64/console* /etc/prometheus
            sudo mv prometheus-2.41.0.linux-amd64/prometheus.yml /etc/prometheus
            sudo chown -R prometheus:prometheus /etc/prometheus
                        
            sudo mv prometheus-2.41.0.linux-amd64/prometheus /usr/local/bin/
            sudo chown prometheus:prometheus /usr/local/bin/prometheus
           
            sudo systemctl daemon-reload
            sudo systemctl enable prometheus
            sudo systemctl start prometheus
            sudo firewall-cmd --add-service=prometheus --permanent
            sudo firewall-cmd --reload
            
            # install Redis
            sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y
            yum clean all
            
            sudo yum install redis -y
            # Start redis server
            # sudo redis-server /etc/redis.conf
            
            # install postgreSQL
            sudo amazon-linux-extras install postgresql14 postgresql-server -y
            
            
            
            
